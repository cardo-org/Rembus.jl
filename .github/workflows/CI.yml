name: CI

on:
  push:
    branches:
      - main
    tags: ['*']
  pull_request:
  workflow_dispatch:

env:
  DEPLOY_IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/broker

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    permissions:
      actions: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.12'
        os:
          - ubuntu-latest
          - windows-latest
        arch:
          - x64

    env:
      MQTT_HOST: 127.0.0.1
      MQTT_PORT: 1883

    steps:
      - uses: actions/checkout@v5

      - name: Install ssh-keygen on Windows
        if: runner.os == 'Windows'
        run: choco install openssh
        shell: cmd

      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}

      - uses: julia-actions/cache@v2

      - name: Install Mosquitto on Ubuntu
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y mosquitto mosquitto-clients
          sudo systemctl enable mosquitto
          sudo systemctl start mosquitto

      - name: Wait for Mosquitto to be ready
        if: runner.os == 'Linux'
        run: |
          for i in {1..10}; do
            nc -z ${MQTT_HOST} ${MQTT_PORT} && echo "Mosquitto is up" && exit 0
            echo "Waiting for Mosquitto..."
            sleep 1
          done
          echo "Mosquitto did not start in time" >&2
          exit 1

      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v5
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    env:
      DOCKER_IMAGE: rembus/broker
      IMAGE_TAG: ${{ github.ref_name }}
    steps:
      - uses: actions/checkout@v5
      - name: Extract stripped tag
        run: echo "IMAGE_TAG_STRIPPED=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV
      - name: Set up Julia
        uses: julia-actions/setup-julia@v2
        with:
          version: '1.11'
      - name: Build the app image
        shell: julia --project=. --color=yes {0}
        run: |
          using Pkg
          Pkg.add("PackageCompiler")
          using PackageCompiler
          create_app(".", "build"; executables = ["broker"=>"brokerd"], force=true)
      - name: Build sv shim
        run: gcc shims/sv.c -o build/bin/sv
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:${{ env.IMAGE_TAG_STRIPPED }}

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: write
      statuses: write
    steps:
      - uses: actions/checkout@v5
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1'
      - uses: julia-actions/cache@v2
      - name: Configure doc environment
        shell: julia --project=docs --color=yes {0}
        run: |
          using Pkg
          Pkg.develop(PackageSpec(path=pwd()))
          Pkg.instantiate()
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-docdeploy@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Run doctests
        shell: julia --project=docs --color=yes {0}
        run: |
          using Documenter: DocMeta, doctest
          using Rembus
          DocMeta.setdocmeta!(Rembus, :DocTestSetup, :(using Rembus); recursive=true)
          doctest(Rembus)
