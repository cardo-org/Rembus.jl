var documenterSearchIndex = {"docs":
[{"location":"cheatsheet/#Rembus-Cheat-Sheet","page":"Rembus Cheat Sheet","title":"Rembus Cheat Sheet","text":"","category":"section"},{"location":"cheatsheet/#Startup-and-teardown","page":"Rembus Cheat Sheet","title":"Startup and teardown","text":"","category":"section"},{"location":"cheatsheet/","page":"Rembus Cheat Sheet","title":"Rembus Cheat Sheet","text":"Connect to the broker with identity myname:","category":"page"},{"location":"cheatsheet/","page":"Rembus Cheat Sheet","title":"Rembus Cheat Sheet","text":"@component \"myname\"","category":"page"},{"location":"cheatsheet/","page":"Rembus Cheat Sheet","title":"Rembus Cheat Sheet","text":"Close the connection and terminate the component:","category":"page"},{"location":"cheatsheet/","page":"Rembus Cheat Sheet","title":"Rembus Cheat Sheet","text":"@terminate","category":"page"},{"location":"cheatsheet/","page":"Rembus Cheat Sheet","title":"Rembus Cheat Sheet","text":"Loop unless Ctrl-C or shutdown():","category":"page"},{"location":"cheatsheet/","page":"Rembus Cheat Sheet","title":"Rembus Cheat Sheet","text":"forever()","category":"page"},{"location":"cheatsheet/","page":"Rembus Cheat Sheet","title":"Rembus Cheat Sheet","text":"NOTE: forever is required by @subscribe and @expose unless you are in the REPL.","category":"page"},{"location":"cheatsheet/","page":"Rembus Cheat Sheet","title":"Rembus Cheat Sheet","text":"Terminate background Rembus task and return from forever():","category":"page"},{"location":"cheatsheet/","page":"Rembus Cheat Sheet","title":"Rembus Cheat Sheet","text":"shutdown()","category":"page"},{"location":"cheatsheet/#Pub/Sub:-1-publisher-and-N-subscribers","page":"Rembus Cheat Sheet","title":"Pub/Sub: 1 publisher and N subscribers","text":"","category":"section"},{"location":"cheatsheet/","page":"Rembus Cheat Sheet","title":"Rembus Cheat Sheet","text":"Publish a message with topic mytopic and data payload that is the CBOR encoding of [arg1, arg2, arg3]:","category":"page"},{"location":"cheatsheet/","page":"Rembus Cheat Sheet","title":"Rembus Cheat Sheet","text":"@publish mytopic(arg1, arg2, arg3)","category":"page"},{"location":"cheatsheet/","page":"Rembus Cheat Sheet","title":"Rembus Cheat Sheet","text":"Subscribe to topic mytopic, the arguments arg1, arg2, arg3 are the CBOR decoded values of the data payload:","category":"page"},{"location":"cheatsheet/","page":"Rembus Cheat Sheet","title":"Rembus Cheat Sheet","text":"# Method `mytopic` is called for each published message.\nfunction mytopic(arg1, arg2, arg3)\n    # do something\nend\n\n# Two different modes of subscription:\n@subscribe mytopic from_now # declare interest to topic mytopic handling newer messages \n@subscribe mytopic before_now # messages from the past and not received because offline\n@subscribe mytopic # default to from_now  ","category":"page"},{"location":"cheatsheet/","page":"Rembus Cheat Sheet","title":"Rembus Cheat Sheet","text":"Start and stop to call subscribed methods when a published message is received:","category":"page"},{"location":"cheatsheet/","page":"Rembus Cheat Sheet","title":"Rembus Cheat Sheet","text":"@reactive\n@reactive_off","category":"page"},{"location":"cheatsheet/","page":"Rembus Cheat Sheet","title":"Rembus Cheat Sheet","text":"Remove the topic subscription:","category":"page"},{"location":"cheatsheet/","page":"Rembus Cheat Sheet","title":"Rembus Cheat Sheet","text":"@unsubscribe mytopic","category":"page"},{"location":"cheatsheet/","page":"Rembus Cheat Sheet","title":"Rembus Cheat Sheet","text":"By default reactive in enabled.","category":"page"},{"location":"cheatsheet/#Remote-Procedure-Call","page":"Rembus Cheat Sheet","title":"Remote Procedure Call","text":"","category":"section"},{"location":"cheatsheet/","page":"Rembus Cheat Sheet","title":"Rembus Cheat Sheet","text":"Call the remote method myrpc exposed by a component:","category":"page"},{"location":"cheatsheet/","page":"Rembus Cheat Sheet","title":"Rembus Cheat Sheet","text":"response = @rpc myrpc(arg1, arg2)","category":"page"},{"location":"cheatsheet/","page":"Rembus Cheat Sheet","title":"Rembus Cheat Sheet","text":"NOTE: in case of successfull invocation the response value is the remote method return value, othervise an exception is thrown.","category":"page"},{"location":"cheatsheet/","page":"Rembus Cheat Sheet","title":"Rembus Cheat Sheet","text":"Expose a method implementation:","category":"page"},{"location":"cheatsheet/","page":"Rembus Cheat Sheet","title":"Rembus Cheat Sheet","text":"function myrpc(arg1, arg2)\n    # evaluate body and return response ...\n    return response\nend\n\n@expose myrpc(arg1, arg2)","category":"page"},{"location":"cheatsheet/","page":"Rembus Cheat Sheet","title":"Rembus Cheat Sheet","text":"Stop to serve the RPC method:","category":"page"},{"location":"cheatsheet/","page":"Rembus Cheat Sheet","title":"Rembus Cheat Sheet","text":"@unexpose myrpc","category":"page"},{"location":"supervised_api/#Supervised-API","page":"Supervised API","title":"Supervised API","text":"","category":"section"},{"location":"supervised_api/","page":"Supervised API","title":"Supervised API","text":"One of the Rembus goals is to get writing distributed applications a streamlined process.","category":"page"},{"location":"supervised_api/","page":"Supervised API","title":"Supervised API","text":"But beside struggling to provide a simple and lean API one of the main points of Rembus is its ability to be fault-tolerant respect to networks and application failures.","category":"page"},{"location":"supervised_api/","page":"Supervised API","title":"Supervised API","text":"For example the following RPC service will run forever and it will reconnect automatically to the broker in case of network failures or broker unavailability: there isn't boilerplate code for connection management.","category":"page"},{"location":"supervised_api/","page":"Supervised API","title":"Supervised API","text":"@component \"mycomponent\"\n\nfunction myservice(input::DataFrame)\n    # run your super-cool logic and get back the result\n    output_df = my_logic(input)\n    return output_df\nend\n\n@expose myservice\n\nforever()","category":"page"},{"location":"supervised_api/","page":"Supervised API","title":"Supervised API","text":"Fault-tolerance holds equally for publish/subscribe setups: connection failures recovers automatically and published messages are cached and delivered as soon as possible.","category":"page"},{"location":"configuration/#Configuartion","page":"Configuration","title":"Configuartion","text":"","category":"section"},{"location":"configuration/#Broker-environment-variables","page":"Configuration","title":"Broker environment variables","text":"","category":"section"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"The broker setup is affected by the following environment variables.","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"Variable Default Descr\nBROKER_DB $HOME/caronte Root dir for configuration files and cached messages to be delivered to offline components opting for retroactive mode\nBROKER_TCP_PORT 8000 use tls://<host>:$BROKER_TCP_PORT for serving TLS protocol\nBROKER_WS_PORT 8001 use wss://<host>:$BROKER_WS_PORT for serving WSS protocol\nBROKER_ZMQ_PORT 8002 ZeroMQ port zmq://<host>:$BROKER_ZMQ_PORT\nREMBUS_DEBUG 0 \"1\": enable debug traces\nREMBUS_KEYSTORE $HOME/keystore Directory of broker certificate caronte.crt and broker secret key caronte.key","category":"page"},{"location":"configuration/#Component-environment-variables","page":"Configuration","title":"Component environment variables","text":"","category":"section"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"A Rembus component is affected by the following environement variables. ","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"Variable Default Descr\nREMBUS_BASE_URL ws://localhost:8000 Default base url when defining component with  a simple string instead of a complete url. @component \"myclient\" is equivalent to @component \"ws://localhost:8000/myclient\"\nREMBUS_CA rembus-ca.crt CA certificate file name. This file has to be in $REMBUS_KEYSTORE directory\nREMBUS_DEBUG 0 \"1\": enable debug traces\nREMBUS_KEYSTORE $HOME/keystore Directory of CA certificate\nREMBUS_TIMEOUT 5 Maximum number of seconds waiting for rpc responses\nHTTP_CA_BUNDLE $REMBUS_KEYSTORE/$REMBUS_CA CA certificate","category":"page"},{"location":"configuration/#Database-structure","page":"Configuration","title":"Database structure","text":"","category":"section"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"Rembus configuration data and secret materials is persisted to BROKER_DB directory.","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"The database directory has the following layout:","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"> cd $REMBUS_DB\n> tree .\n\n.\n├── admins.json\n├── apps\n│   ├── bar\n│   └── foo\n├── impls.json\n├── interests.json\n├── owners.csv\n├── token_app.csv\n├── topic_auth.json\n├── twins\n    ├── bar\n    └── foo\n\n","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"where foo and bar are the component identifiers (cid).","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"In case the component are offline the undelivered messages are temporarly persisted into twins/bar and /twins/foo files.","category":"page"},{"location":"configuration/#Admin-privileges","page":"Configuration","title":"Admin privileges","text":"","category":"section"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"admins.json contains the list of components that have the admin role. The element of this list is the component cid.","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"> cat admins.json\n[\"foo\", \"bar\"]","category":"page"},{"location":"configuration/#RPC-implementors","page":"Configuration","title":"RPC implementors","text":"","category":"section"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"impls.json is a map with topic as keyword and an array of cid as values.","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"For example:","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"> cat impls.json\n{\n    \"topic_1\":[\"foo\"],\n    \"topic_2\":[\"foo\", \"bar\"]\n}","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"foo component implements topic_1 and topic_2 rpc methods.\nbar component implements topic_2 rpc method.","category":"page"},{"location":"configuration/#PubSub-subscribers","page":"Configuration","title":"PubSub subscribers","text":"","category":"section"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"twins.json is a map: the keywords are cid and the values are map. The keys of the map are the subscribed topics and the boolean value is true if the subscription is retroactive:","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"> cat twins.json\n{\n    \"mycomponent\":{\"mytopic1\": true, \"mytopic2\": false}\n}","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"mycomponent is interested to mytopic1 and mytopic2 messages, and mytopic1 subscribed with option before_now:","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"@subscribe mytopic1 before_now","category":"page"},{"location":"configuration/#Private-topics","page":"Configuration","title":"Private topics","text":"","category":"section"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"topic_auth.json is a map with topic as keywords and an array of cid as values.","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"For example if:","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"> cat topic_auth..json\n{\n    \"foo\":[\"myconsumer\",\"myproducer\"]\n}","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"then only components myconsumer and myproducer are allowed to bind to the topic foo.","category":"page"},{"location":"configuration/#Users-authorized-to-register-components","page":"Configuration","title":"Users authorized to register components","text":"","category":"section"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"owners.csv is a csv file containing users allowed to register components.","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"The pin column is the PIN token needed for registration.","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"> cat owners.csv \npin,uid,name,enabled\n482dc7eb,paperoga@topolinia.com,Paperoga,false\n58e26283,paperino@topolinia.com,Paperino,false","category":"page"},{"location":"configuration/#Components-ownership","page":"Configuration","title":"Components ownership","text":"","category":"section"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"token_app.csv is a csv file containing the mapping between the registered components and the user that performed the registration.","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"uid is the user identity and app is the component identifier.","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"For example if the user Paperoga registered the component foo then:","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"> cat token_app.csv\nuid,app\npaperoga@topolinia.com,foo","category":"page"},{"location":"#Rembus","page":"Home","title":"Rembus","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Rembus","category":"page"},{"location":"#Broker","page":"Home","title":"Broker","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Starting the broker is simple as:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia -e \"using Rembus; caronte()\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"A startup script could be useful and the following caronte script suffice:","category":"page"},{"location":"","page":"Home","title":"Home","text":"##!/bin/bash\n#=\nBINDIR=$( cd -- \"$( dirname -- \"${BASH_SOURCE[0]}\" )\" &> /dev/null && pwd )\nexec julia --threads auto --color=no -e \"include(popfirst!(ARGS))\" \\\n --project=$BINDIR/.. --startup-file=no \"${BASH_SOURCE[0]}\" \"$@\"\n=#\nusing Rembus\n\nRembus.caronte()","category":"page"},{"location":"","page":"Home","title":"Home","text":"See Broker environment variables for customizing the runtime setting.  ","category":"page"},{"location":"#Component","page":"Home","title":"Component","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Component is a broker client who uses the Rembus protocol for RPC commands and for streaming data in a Pub/Sub fashion.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The macro @component declares a component whom identity and the connection parameters are defined with an URL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"component_url = \"[<protocol>://][<host>][:<port>/]<cid>\"\n\n@component component_url","category":"page"},{"location":"","page":"Home","title":"Home","text":"<protocol> is one of:","category":"page"},{"location":"","page":"Home","title":"Home","text":"ws web socket\nwss secure web socket\ntcp tcp socket\ntls TLS over tcp socket\nzmq ZeroMQ socket","category":"page"},{"location":"","page":"Home","title":"Home","text":"<host> and <port> are the hostname/ip and the port of the broker listening endpoint.","category":"page"},{"location":"","page":"Home","title":"Home","text":"<cid> is the unique name of the component.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For example:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@component \"ws://caronte.org:8000/myclient\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"defines the component myclient that communicates with the broker hosted on caronte.org, listening on port 8000 and accepting web socket connections.","category":"page"},{"location":"#Default-component-URL-parameters","page":"Home","title":"Default component URL parameters","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The string that define a component may be simplified by using the enviroment variable REMBUS_BASE_URL that set the connection default parameters:","category":"page"},{"location":"","page":"Home","title":"Home","text":"For example:","category":"page"},{"location":"","page":"Home","title":"Home","text":"REMBUS_BASE_URL=ws://localhost:8000","category":"page"},{"location":"","page":"Home","title":"Home","text":"define the default protocol, host and port, so that the above component_url may be simplified as:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@component \"myclient\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Uses the web socket protocol to connect to localhost on port 8000.","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Rembus]","category":"page"},{"location":"#Rembus.RembusDisconnect","page":"Home","title":"Rembus.RembusDisconnect","text":"RembusDisconnect\n\nThrown when a rembus connection get unexpectedly down.\n\n\n\n\n\n","category":"type"},{"location":"#Rembus.RembusTimeout","page":"Home","title":"Rembus.RembusTimeout","text":"RembusTimeout\n\nThrown when a response it is not received.\n\n\n\n\n\n","category":"type"},{"location":"#Rembus.RpcMethodException","page":"Home","title":"Rembus.RpcMethodException","text":"RpcMethodException\n\nThrown when a RPC method throws an exception.\n\nFields\n\ncid: component name\ntopic: service name\nreason: remote exception description\n\nExposer\n\n@expose foo(name::AbstractString) = \"hello \" * name\n\nRPC client\n\ntry\n    @rpc foo(1)\ncatch e\n    @error e.reason\nend\n\nOutput:\n\n┌ Error: MethodError: no method matching foo(::UInt64)\n│\n│ Closest candidates are:\n│   foo(!Matched::AbstractString)\n│    @ Main REPL[2]:1\n└ @ Main REPL\n\n\n\n\n\n","category":"type"},{"location":"#Rembus.RpcMethodLoopback","page":"Home","title":"Rembus.RpcMethodLoopback","text":"RpcMethodLoopback\n\nThrown when a RPC request to a locally exposed method.\n\nFields\n\ncid: component name\ntopic: service name\n\n\n\n\n\n","category":"type"},{"location":"#Rembus.RpcMethodNotFound","page":"Home","title":"Rembus.RpcMethodNotFound","text":"RpcMethodNotFound is thrown from a rpc request when a remote method is unknown.\n\nfields:\n\ncid: component name\ntopic: service name\n\nRPC Client\n\n@rpc coolservice()\n\nOutput:\n\nERROR: Rembus.RpcMethodNotFound(\"rembus\", \"coolservice\")\nStacktrace:\n...\n\n\n\n\n\n","category":"type"},{"location":"#Rembus.RpcMethodUnavailable","page":"Home","title":"Rembus.RpcMethodUnavailable","text":"RpcMethodUnavailable\n\nThrown when a RPC method is unavailable.\n\nA method is considered unavailable when some component that expose the method is currently disconnected from the broker.\n\nFields\n\ncid: component name\ntopic: service name\n\n\n\n\n\n","category":"type"},{"location":"#Rembus.authorize-Tuple{Any, Any, Any}","page":"Home","title":"Rembus.authorize","text":"authorize(router, twin, msg)\n\nAdministration command to authorize a component to publish/subscribe to a private topic.\n\n\n\n\n\n","category":"method"},{"location":"#Rembus.broker_parse-Tuple{Any}","page":"Home","title":"Rembus.broker_parse","text":"broker_parse(pkt)\n\nGet a Rembus message from a CBOR encoded packet.\n\nThe decoding is performed at the broker side.\n\n\n\n\n\n","category":"method"},{"location":"#Rembus.broker_parse-Tuple{Rembus.Router, Rembus.ZMQPacket}","page":"Home","title":"Rembus.broker_parse","text":"broker_parse(router::Router, pkt::ZMQPacket)\n\nThe Broker parser of ZeroMQ messages.\n\npkt is the zeromq message decoded as [identity, header, data].\n\n\n\n\n\n","category":"method"},{"location":"#Rembus.caronte-Tuple{}","page":"Home","title":"Rembus.caronte","text":"caronte(; wait=true, exit_when_done=true)\n\nStart the broker.\n\nReturn immediately when wait is false, otherwise blocks until shut down.\n\nReturn instead of exiting if exit_when_done is false.\n\n\n\n\n\n","category":"method"},{"location":"#Rembus.connect-Tuple{AbstractString}","page":"Home","title":"Rembus.connect","text":"connect(url::AbstractString)::RBHandle\n\nConnect to the broker.\n\nThe returned rembus handler do not auto-reconnect in case of a fault condition.\n\nThe returned RBHandle handle represents a connected component used for the Rembus APIs. For example:\n\nusing Rembus\nrb = connect(\"mycomponent\")\npublish(rb, \"temperature\", [\"room_1\", 21.5])\n\n\n\n\n\n","category":"method"},{"location":"#Rembus.connect-Tuple{}","page":"Home","title":"Rembus.connect","text":"connect()\n\nConnect anonymously to the broker.\n\nA random v4 UUID is used as component identifier.\n\n\n\n\n\n","category":"method"},{"location":"#Rembus.connected_socket_load-Tuple{Any}","page":"Home","title":"Rembus.connected_socket_load","text":"connected_socket_load(pkt)\n\nGet a Rembus message from a CBOR encoded packet.\n\nThe decoding is performed at the client side.\n\n\n\n\n\n","category":"method"},{"location":"#Rembus.create_private_key-Tuple{AbstractString}","page":"Home","title":"Rembus.create_private_key","text":"create_private_key(cid::AbstractString)\n\nCreate a private key for cid component and return its public key.\n\n\n\n\n\n","category":"method"},{"location":"#Rembus.expose-Tuple{Rembus.RBHandle, AbstractString, Function}","page":"Home","title":"Rembus.expose","text":"expose(rb::RBHandle, topic::AbstractString, fn::Function; exceptionerror=true)\n\nThe methods of function fn are registered to be executed when a RPC topic request is received.\n\nThe returned value is the RPC response returned to the RPC client.\n\n\n\n\n\n","category":"method"},{"location":"#Rembus.load_owners-Tuple{}","page":"Home","title":"Rembus.load_owners","text":"load_owners()\n\nReturn the owners dataframe\n\n\n\n\n\n","category":"method"},{"location":"#Rembus.load_token_app-Tuple{}","page":"Home","title":"Rembus.load_token_app","text":"load_token_app()\n\nReturn the token_app dataframe\n\n\n\n\n\n","category":"method"},{"location":"#Rembus.load_twins-Tuple{Any}","page":"Home","title":"Rembus.load_twins","text":"load_twins(router)\n\nInstantiates twins that have one or more interests.\n\n\n\n\n\n","category":"method"},{"location":"#Rembus.private_topic-Tuple{Any, Any, Any}","page":"Home","title":"Rembus.private_topic","text":"private_topic(router, twin, msg)\n\nAdministration command to declare a private topic.\n\n\n\n\n\n","category":"method"},{"location":"#Rembus.public_topic-Tuple{Any, Any, Any}","page":"Home","title":"Rembus.public_topic","text":"public_topic(router, twin, msg)\n\nAdministration command to reset a topic to public.\n\n\n\n\n\n","category":"method"},{"location":"#Rembus.publish","page":"Home","title":"Rembus.publish","text":"publish(rb::RBHandle, topic::AbstractString, data=[])\n\nPublish data values on topic topic.\n\ndata may be any type of data, but if the components are implemented in different languages then data has to be a DataFrame or a CBOR basic data type.\n\n\n\n\n\n","category":"function"},{"location":"#Rembus.reactive-Tuple{Rembus.RBHandle}","page":"Home","title":"Rembus.reactive","text":"reactive(rb::RBHandle, timeout=5; exceptionerror=true)\n\nStart the delivery of published messages for which there was declared an interest with subscribe.\n\n\n\n\n\n","category":"method"},{"location":"#Rembus.register-Tuple{AbstractString, AbstractString, AbstractString}","page":"Home","title":"Rembus.register","text":"register(cid::AbstractString)\n\nRegister the client identified by cid.\n\n\n\n\n\n","category":"method"},{"location":"#Rembus.rpc","page":"Home","title":"Rembus.rpc","text":"rpc(rb::RBHandle,\n    topic::AbstractString,\n    data=nothing;\n    exceptionerror=true,\n    timeout=request_timeout())\n\nCall the remote topic method with arguments extracted from data.\n\nExposer\n\nusing Rembus\nusing Statistics\n\n@expose service_noargs() = \"success\"\n\n@expose service_name(name) = \"hello \" * name\n\n@expose service_dictionary(d) = mean(values(d))\n\n@expose function service_multiple_args(name, score, flags)\n    isa(name, String) && isa(score, Float64) && isa(flags, Vector)\nend\n\nRPC client\n\nusing Rembus\n\nrb = connect()\n\nrcp(rb, \"service_noargs\")\n\nrpc(rb, \"service_name\", \"hello world\")\n\nrpc(rb, \"service_dictionary\", Dict(\"r1\"=>13.3, \"r2\"=>3.0))\n\nrpc(rb, \"service_multiple_args\", [\"name\", 1.0, [\"red\"=>1,\"blue\"=>2,\"yellow\"=>3]])\n\n\n\n\n\n","category":"function"},{"location":"#Rembus.save_configuration-Tuple{Rembus.Router}","page":"Home","title":"Rembus.save_configuration","text":"save_configuration(router::Router)\n\nPersist router configuration on disk.\n\n\n\n\n\n","category":"method"},{"location":"#Rembus.save_owners-Tuple{Any}","page":"Home","title":"Rembus.save_owners","text":"save_owners(owners_df)\n\nSave the owners table.\n\n\n\n\n\n","category":"method"},{"location":"#Rembus.save_token_app-Tuple{Any}","page":"Home","title":"Rembus.save_token_app","text":"save_token_app(df)\n\nSave the owners table.\n\n\n\n\n\n","category":"method"},{"location":"#Rembus.save_twins-Tuple{Any}","page":"Home","title":"Rembus.save_twins","text":"save_twins(router)\n\nPersist twins to storage.\n\nSave twins configuration only if twin has a name.\n\nPersist undelivered messages if they are queued in memory.\n\n\n\n\n\n","category":"method"},{"location":"#Rembus.set_broker_context-Tuple{Any}","page":"Home","title":"Rembus.set_broker_context","text":"set_broker_context(ctx)\n\nSet the object to be passed ad first argument to functions related to twin lifecycle.\n\nActually the functions that use ctx are:\n\ntwin_initialize\ntwin_finalize\npark\nunpark\n\n\n\n\n\n","category":"method"},{"location":"#Rembus.set_broker_plugin-Tuple{Module}","page":"Home","title":"Rembus.set_broker_plugin","text":"set_broker_plugin(extension::Module)\n\nInject the module that implements the functions related to twin lifecycle.\n\n\n\n\n\n","category":"method"},{"location":"#Rembus.shared-Tuple{Rembus.RBHandle, Any}","page":"Home","title":"Rembus.shared","text":"shared(rb::RBHandle, ctx)\n\nBind a ctx context object to the rb component.\n\nWhen a ctx context object is bound then it will be the first argument of subscribed and exposed methods.\n\n\n\n\n\n","category":"method"},{"location":"#Rembus.subscribe","page":"Home","title":"Rembus.subscribe","text":"subscribe(\n    rb::RBHandle, topic::AbstractString, fn::Function, retroactive::Bool=false;\n    exceptionerror=true\n)\n\nDeclare interest for messages published on topic.\n\nThe function fn is called when a message is received on topic and reactive put the rb component in reactive mode.\n\nIf retroactive is true then rb component will receive messages published when it was offline.\n\n\n\n\n\n","category":"function"},{"location":"#Rembus.unauthorize-Tuple{Any, Any, Any}","page":"Home","title":"Rembus.unauthorize","text":"unauthorize(router, twin, msg)\n\nAdministration command to unauthorize a component to publish/subscribe to a private topic.\n\n\n\n\n\n","category":"method"},{"location":"#Rembus.unexpose-Tuple{Rembus.RBHandle, AbstractString}","page":"Home","title":"Rembus.unexpose","text":"unexpose(rb::RBHandle, topic::AbstractString; exceptionerror=true)\n\nStop servicing RPC topic request.\n\n\n\n\n\n","category":"method"},{"location":"#Rembus.unreactive-Tuple{Rembus.RBHandle}","page":"Home","title":"Rembus.unreactive","text":"unreactive(rb::RBHandle, timeout=5; exceptionerror=true)\n\nStop the delivery of published message.\n\n\n\n\n\n","category":"method"},{"location":"#Rembus.unregister-Tuple{Any, AbstractString}","page":"Home","title":"Rembus.unregister","text":"unregister(cid::AbstractString)\n\nUnregister the client identified by cid.\n\nThe secret pin is not needed because only an already connected and authtenticated component may execute the unregister command.\n\n\n\n\n\n","category":"method"},{"location":"#Rembus.unsubscribe-Tuple{Rembus.RBHandle, AbstractString}","page":"Home","title":"Rembus.unsubscribe","text":"unsubscribe(rb::RBHandle, topic::AbstractString; exceptionerror=true)\n\nNo more messages published on topic will be delivered to rb component.\n\n\n\n\n\n","category":"method"},{"location":"#Rembus.zmq_load-Tuple{ZMQ.Socket}","page":"Home","title":"Rembus.zmq_load","text":"zmq_load(socket::ZMQ.Socket)\n\nGet a Rembus message from a ZeroMQ multipart message.\n\nThe decoding is performed at the client side.\n\n\n\n\n\n","category":"method"},{"location":"#Rembus.zmq_message-Tuple{Rembus.Router}","page":"Home","title":"Rembus.zmq_message","text":"zmq_message(router::Router)::ZMQPacket\n\nReceive a Multipart ZeroMQ message.\n\nReturn the packet identity, header and data values extracted from a ROUTER socket.\n\n\n\n\n\n","category":"method"},{"location":"#Rembus.zmq_message-Tuple{ZMQ.Socket}","page":"Home","title":"Rembus.zmq_message","text":"zmq_message(socket::ZMQ.Socket)::ZMQDealerPacket\n\nReceive a Multipart ZeroMQ message.\n\nReturn the packet header and data values extracted from a DEALER socket.\n\n\n\n\n\n","category":"method"},{"location":"#Rembus.@component-Tuple{Any}","page":"Home","title":"Rembus.@component","text":"@component \"url\"\n\nSet the name of the component and the protocol for connecting to the broker.\n\nurl may be:\n\n\"myname\": use $REMBUS_BASE_URL for connection parameters\n\"tcp://host:port/myname\": tcp connection\n\"ws://host:port/myname\": web socket connection\n\"zmq://host:port/myname\": ZeroMQ connection\n\n\n\n\n\n","category":"macro"},{"location":"#Rembus.@disable_ack","page":"Home","title":"Rembus.@disable_ack","text":"@disable_ack\n\nDisable acknowledge receipt of published messages.\n\nThis feature assure that messages get delivered at least one to the subscribed component.\n\n\n\n\n\n","category":"macro"},{"location":"#Rembus.@enable_ack","page":"Home","title":"Rembus.@enable_ack","text":"@enable_ack\n\nEnable acknowledge receipt of published messages.\n\nThis feature assure that messages get delivered at least one time to the subscribed component.\n\nFor default the acknowledge is disabled.\n\n\n\n\n\n","category":"macro"},{"location":"#Rembus.@expose-Tuple{Expr}","page":"Home","title":"Rembus.@expose","text":"@expose function fn(arg1,...)\n    ...\nend\n\nExpose the function expression.\n\n\n\n\n\n","category":"macro"},{"location":"#Rembus.@expose-Tuple{Symbol}","page":"Home","title":"Rembus.@expose","text":"@expose fn\n\nExpose all the methods of the function fn.\n\nExample\n\nExpose the function mycalc that implements a service that may accept two numbers or a string and number:\n\nmycalc(x::Number, y::Number) = x+y\nmycalc(x::String, y::Number) = length(x)*y\n\n@expose mycalc\n\nCall mycal service using the correct types of arguments:\n\n# ok\njulia> response = @rpc mycalc(1,2)\n0x0000000000000003\n\n# ok\njulia> response = @rpc mycalc(\"hello\",2.0)\n10.0\n\nIf the RPC client call mycalc with the argument's type that do not respect the signatures of the exposed service then it throws RpcMethodException\n\njulia> response = @rpc mycalc(\"hello\",\"world\")\nERROR: RpcMethodException(\"rembus\", \"mycalc\", \"MethodError: no method matching mycalc(::String, ::String) ...\n\n\n\n\n\n","category":"macro"},{"location":"#Rembus.@publish-Tuple{Any}","page":"Home","title":"Rembus.@publish","text":"@publish topic(arg1,arg2,...)\n\nPublish a message to topic logic channel.\n\nThe function topic(arg1,arg2,...) will be called on each connected component subscribed to topic.\n\nPublisher\n\n@publish foo(\"gfr\", 54.2)\n\nSubscriber\n\nfunction foo(name, value)\n    println(\"do something with $name=$value\")\nend\n\n@subscribe foo\n@reactive\n\nsupervise()\n\n\n\n\n\n","category":"macro"},{"location":"#Rembus.@reactive","page":"Home","title":"Rembus.@reactive","text":"@reactive\n\nThe subscribed methods start to handle published messages.\n\n\n\n\n\n","category":"macro"},{"location":"#Rembus.@rpc-Tuple{Any}","page":"Home","title":"Rembus.@rpc","text":"@rpc service(arg1,...)\n\nCall the remote service method and return its outcome.\n\nThe outcome may be the a return value or a RpcMethodException if the remote throws an exception.\n\nThe service method must match the signature of an exposed remote service method.\n\nComponents may subscribe to service for receiving the service request.\n\nExposer\n\nfunction mymethod(x, y)\n    return evaluate(x,y)\nend\n\n@expose mymethod\nsupervise()\n\nRPC client\n\nresponse = @rpc mymethod(x,y)\n\nSubscriber\n\nfunction service(x, y)\n    ...\nend\n\n@subscribe service\n@reactive\n\nsupervise()\n\n\n\n\n\n\n","category":"macro"},{"location":"#Rembus.@rpc_timeout-Tuple{Any}","page":"Home","title":"Rembus.@rpc_timeout","text":"@rpc_timeout value\n\nSet the rpc request timeout in seconds.\n\n\n\n\n\n","category":"macro"},{"location":"#Rembus.@shared-Tuple{Any}","page":"Home","title":"Rembus.@shared","text":" @shared container\n\nBind a container object that is passed as the first argument of the subscribed component functions.\n\nThe container is useful for mantaining a state.\n\nusing Rembus\n\n# keep the number of processed messages\nmutable struct Context\n    msgcount::UInt\nend\n\nfunction topic(context::Context, arg1, arg2)\n    context.msgcount += 1\n    some_logic(arg1, arg2)\nend\n\nctx = Context(0)\n@subscribe topic\n@shared ctx\n@reactive\n\nUsing @shared to set a container object means that if some component publish topic(arg1,arg2) then the method foo(container,arg2,arg2) will be called.\n\n\n\n\n\n","category":"macro"},{"location":"#Rembus.@subscribe","page":"Home","title":"Rembus.@subscribe","text":"@subscribe function fn(args...)\n    ...\nend [mode]\n\nSubscribe the function expression.\n\n\n\n\n\n","category":"macro"},{"location":"#Rembus.@subscribe-2","page":"Home","title":"Rembus.@subscribe","text":"@subscribe topic [mode]\n\nSetup a subscription to topic logic channel to handle messages from @publish or @rpc.\n\nmode values`:\n\nfrom_now (default): receive messages published from now.\nbefore_now: receive messages published when the component was offline.\n\nMessages starts to be delivered to topic when reactivity is enabled with @reactive macro.\n\nSubscriber\n\nfunction foo(arg1, arg2)\n    ...\nend\n\n@subscribe foo\n@reactive\n\nsupervise()\n\nPublisher\n\n@publish foo(\"gfr\", 54.2)\n\n\n\n\n\n","category":"macro"},{"location":"#Rembus.@terminate","page":"Home","title":"Rembus.@terminate","text":"@terminate\n\nClose the connection and terminate the component.\n\n\n\n\n\n","category":"macro"},{"location":"#Rembus.@unexpose-Tuple{Symbol}","page":"Home","title":"Rembus.@unexpose","text":"@unexpose fn\n\nThe methods of fn function is no more available to rpc clients.\n\n\n\n\n\n","category":"macro"},{"location":"#Rembus.@unreactive","page":"Home","title":"Rembus.@unreactive","text":"@unreactive\n\nThe subscribed methods stop to handle published messages.\n\n\n\n\n\n","category":"macro"},{"location":"#Rembus.@unsubscribe-Tuple{Symbol}","page":"Home","title":"Rembus.@unsubscribe","text":"@unsubscribe mytopic\n\nThe methods of mytopic function stop to handle messages published to topic mytopic.\n\n\n\n\n\n","category":"macro"},{"location":"unsupervised_api/#Unsupervised-API","page":"Unsupervised API","title":"Unsupervised API","text":"","category":"section"},{"location":"unsupervised_api/","page":"Unsupervised API","title":"Unsupervised API","text":"There is a set of functions that provide the unsupervised API:","category":"page"},{"location":"unsupervised_api/","page":"Unsupervised API","title":"Unsupervised API","text":"connect\npublish\nrpc\nexpose\nsubscribe\nunexpose\nunsubscribe\nclose","category":"page"},{"location":"unsupervised_api/","page":"Unsupervised API","title":"Unsupervised API","text":"The connect function returns a connection handle used by the other APIs for exchanging data and commands.","category":"page"},{"location":"unsupervised_api/","page":"Unsupervised API","title":"Unsupervised API","text":"This API does not provide automatic reconnection in case of network","category":"page"},{"location":"unsupervised_api/","page":"Unsupervised API","title":"Unsupervised API","text":"failures, if this happen the exception must be handled explicitly by the application.","category":"page"},{"location":"unsupervised_api/","page":"Unsupervised API","title":"Unsupervised API","text":"For example to publish a message:","category":"page"},{"location":"unsupervised_api/","page":"Unsupervised API","title":"Unsupervised API","text":"using Rembus\n\nrb = connect(\"mycomponent\")\n\npublish(rb, \"metric\", Dict(\"name\"=>\"trento/castello\", \"var\"=>\"T\", \"value\"=>21.0))\n\nclose(rb)","category":"page"}]
}
